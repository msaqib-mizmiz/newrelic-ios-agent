// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AGENTDATABUNDLE_COM_NEWRELIC_MOBILE_FBS_H_
#define FLATBUFFERS_GENERATED_AGENTDATABUNDLE_COM_NEWRELIC_MOBILE_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace com {
namespace newrelic {
namespace mobile {
namespace fbs {

struct AgentDataBundle;
struct AgentDataBundleT;

struct AgentDataBundleT : public flatbuffers::NativeTable {
  typedef AgentDataBundle TableType;
  std::vector<std::unique_ptr<com::newrelic::mobile::fbs::AgentDataT>> agentData;
  AgentDataBundleT() {
  }
};

struct AgentDataBundle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AgentDataBundleT NativeTableType;
  enum {
    VT_AGENTDATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<com::newrelic::mobile::fbs::AgentData>> *agentData() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<com::newrelic::mobile::fbs::AgentData>> *>(VT_AGENTDATA);
  }
  flatbuffers::Vector<flatbuffers::Offset<com::newrelic::mobile::fbs::AgentData>> *mutable_agentData() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<com::newrelic::mobile::fbs::AgentData>> *>(VT_AGENTDATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AGENTDATA) &&
           verifier.Verify(agentData()) &&
           verifier.VerifyVectorOfTables(agentData()) &&
           verifier.EndTable();
  }
  AgentDataBundleT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AgentDataBundleT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<AgentDataBundle> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AgentDataBundleT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AgentDataBundleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_agentData(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<com::newrelic::mobile::fbs::AgentData>>> agentData) {
    fbb_.AddOffset(AgentDataBundle::VT_AGENTDATA, agentData);
  }
  AgentDataBundleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AgentDataBundleBuilder &operator=(const AgentDataBundleBuilder &);
  flatbuffers::Offset<AgentDataBundle> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<AgentDataBundle>(end);
    return o;
  }
};

inline flatbuffers::Offset<AgentDataBundle> CreateAgentDataBundle(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<com::newrelic::mobile::fbs::AgentData>>> agentData = 0) {
  AgentDataBundleBuilder builder_(_fbb);
  builder_.add_agentData(agentData);
  return builder_.Finish();
}

inline flatbuffers::Offset<AgentDataBundle> CreateAgentDataBundleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<com::newrelic::mobile::fbs::AgentData>> *agentData = nullptr) {
  return com::newrelic::mobile::fbs::CreateAgentDataBundle(
      _fbb,
      agentData ? _fbb.CreateVector<flatbuffers::Offset<com::newrelic::mobile::fbs::AgentData>>(*agentData) : 0);
}

flatbuffers::Offset<AgentDataBundle> CreateAgentDataBundle(flatbuffers::FlatBufferBuilder &_fbb, const AgentDataBundleT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AgentDataBundleT *AgentDataBundle::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new AgentDataBundleT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void AgentDataBundle::UnPackTo(AgentDataBundleT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = agentData(); if (_e) { _o->agentData.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->agentData[_i] = std::unique_ptr<com::newrelic::mobile::fbs::AgentDataT>(_e->Get(_i)->UnPack(_resolver)); } } };
}

inline flatbuffers::Offset<AgentDataBundle> AgentDataBundle::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AgentDataBundleT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAgentDataBundle(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<AgentDataBundle> CreateAgentDataBundle(flatbuffers::FlatBufferBuilder &_fbb, const AgentDataBundleT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  auto _agentData = _o->agentData.size() ? _fbb.CreateVector<flatbuffers::Offset<com::newrelic::mobile::fbs::AgentData>>(_o->agentData.size(), [&](size_t i) { return CreateAgentData(_fbb, _o->agentData[i].get(), _rehasher); }) : 0;
  return com::newrelic::mobile::fbs::CreateAgentDataBundle(
      _fbb,
      _agentData);
}

inline const com::newrelic::mobile::fbs::AgentDataBundle *GetAgentDataBundle(const void *buf) {
  return flatbuffers::GetRoot<com::newrelic::mobile::fbs::AgentDataBundle>(buf);
}

inline AgentDataBundle *GetMutableAgentDataBundle(void *buf) {
  return flatbuffers::GetMutableRoot<AgentDataBundle>(buf);
}

inline bool VerifyAgentDataBundleBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<com::newrelic::mobile::fbs::AgentDataBundle>(nullptr);
}

inline void FinishAgentDataBundleBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<com::newrelic::mobile::fbs::AgentDataBundle> root) {
  fbb.Finish(root);
}

inline std::unique_ptr<AgentDataBundleT> UnPackAgentDataBundle(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<AgentDataBundleT>(GetAgentDataBundle(buf)->UnPack(res));
}

}  // namespace fbs
}  // namespace mobile
}  // namespace newrelic
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_AGENTDATABUNDLE_COM_NEWRELIC_MOBILE_FBS_H_
